# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
import driver_pb2 as driver__pb2


class DriverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.healthCheck = channel.unary_unary(
                '/Driver/healthCheck',
                request_serializer=common__pb2.empty.SerializeToString,
                response_deserializer=common__pb2.empty.FromString,
                )
        self.registerWorkerPort = channel.unary_unary(
                '/Driver/registerWorkerPort',
                request_serializer=driver__pb2.workerPort.SerializeToString,
                response_deserializer=common__pb2.empty.FromString,
                )
        self.requestTaskAssignment = channel.unary_unary(
                '/Driver/requestTaskAssignment',
                request_serializer=common__pb2.empty.SerializeToString,
                response_deserializer=driver__pb2.assignedTask.FromString,
                )
        self.notifyTaskStatus = channel.unary_unary(
                '/Driver/notifyTaskStatus',
                request_serializer=driver__pb2.assignedTaskResult.SerializeToString,
                response_deserializer=common__pb2.empty.FromString,
                )


class DriverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def healthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerWorkerPort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def requestTaskAssignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def notifyTaskStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DriverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'healthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.healthCheck,
                    request_deserializer=common__pb2.empty.FromString,
                    response_serializer=common__pb2.empty.SerializeToString,
            ),
            'registerWorkerPort': grpc.unary_unary_rpc_method_handler(
                    servicer.registerWorkerPort,
                    request_deserializer=driver__pb2.workerPort.FromString,
                    response_serializer=common__pb2.empty.SerializeToString,
            ),
            'requestTaskAssignment': grpc.unary_unary_rpc_method_handler(
                    servicer.requestTaskAssignment,
                    request_deserializer=common__pb2.empty.FromString,
                    response_serializer=driver__pb2.assignedTask.SerializeToString,
            ),
            'notifyTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.notifyTaskStatus,
                    request_deserializer=driver__pb2.assignedTaskResult.FromString,
                    response_serializer=common__pb2.empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Driver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Driver(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def healthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Driver/healthCheck',
            common__pb2.empty.SerializeToString,
            common__pb2.empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerWorkerPort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Driver/registerWorkerPort',
            driver__pb2.workerPort.SerializeToString,
            common__pb2.empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def requestTaskAssignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Driver/requestTaskAssignment',
            common__pb2.empty.SerializeToString,
            driver__pb2.assignedTask.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def notifyTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Driver/notifyTaskStatus',
            driver__pb2.assignedTaskResult.SerializeToString,
            common__pb2.empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
